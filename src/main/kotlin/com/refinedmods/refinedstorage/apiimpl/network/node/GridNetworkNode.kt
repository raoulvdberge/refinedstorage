package com.refinedmods.refinedstorage.apiimpl.network.node

import com.refinedmods.refinedstorage.api.network.security.Permission
import com.refinedmods.refinedstorage.api.util.Action
import com.refinedmods.refinedstorage.item.PatternItem
import net.minecraft.entity.player.ServerPlayerEntity
import net.minecraft.inventory.CraftingResultInventory
import net.minecraft.inventory.IInventory
import net.minecraft.inventory.container.Container
import net.minecraft.inventory.container.ContainerType
import net.minecraft.item.crafting.ICraftingRecipe
import net.minecraft.item.crafting.IRecipeType
import net.minecraft.tileentity.BlockEntity
import net.minecraft.util.Identifier
import net.minecraft.util.text.Text
import net.minecraft.util.text.TranslationTextComponent
import net.minecraftforge.fluids.FluidAttributes
import net.minecraftforge.fluids.FluidInstance
import net.minecraftforge.items.IItemHandler
import net.minecraftforge.items.IItemHandlerModifiable
import net.minecraftforge.items.wrapper.CombinedInvWrapper
import net.minecraftforge.items.wrapper.InvWrapperimport
import java.util.*
import java.util.function.Consumer
import kotlin.collections.HashSet
import kotlin.collections.List
import kotlin.collections.MutableSet

com.refinedmods.refinedstorage.api.util.StackListEntry.stackimport com.refinedmods.refinedstorage.apiimpl.API.Companion.instanceimport com.refinedmods.refinedstorage.api.IRSAPI.getComparerimport com.refinedmods.refinedstorage.api.util.IComparer.isEqualNoQuantityimport com.refinedmods.refinedstorage.api.util.StackListEntry.idimport com.refinedmods.refinedstorage.api.util.IComparer.isEqualimport com.refinedmods.refinedstorage.api.IRSAPI.getQuantityFormatterimport com.refinedmods.refinedstorage.api.util.IQuantityFormatter.formatWithUnitsimport com.refinedmods.refinedstorage.tile.NetworkNodeTile.getNodeimport com.refinedmods.refinedstorage.api.network.INetwork.itemStorageCacheimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.getListimport com.refinedmods.refinedstorage.api.util.IStackList.getimport com.refinedmods.refinedstorage.api.network.INetwork.securityManagerimport com.refinedmods.refinedstorage.api.network.security.ISecurityManager.hasPermissionimport com.refinedmods.refinedstorage.api.network.INetwork.itemStorageTrackerimport com.refinedmods.refinedstorage.api.storage.tracker.IStorageTracker.changedimport com.refinedmods.refinedstorage.api.network.INetwork.extractItemimport com.refinedmods.refinedstorage.api.network.INetwork.networkItemManagerimport com.refinedmods.refinedstorage.api.network.item.INetworkItemManager.drainEnergyimport com.refinedmods.refinedstorage.api.network.INetwork.insertItemimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.getCraftablesListimport com.refinedmods.refinedstorage.api.network.INetwork.craftingManagerimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.createimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResult.isOkimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResult.getTypeimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResult.getRecursedPatternimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getStackimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.startimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResult.getTaskimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResult.getPreviewElementsimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.cancelimport com.refinedmods.refinedstorage.api.network.INetwork.fluidStorageCacheimport com.refinedmods.refinedstorage.api.network.INetwork.fluidStorageTrackerimport com.refinedmods.refinedstorage.api.network.INetwork.extractFluidimport com.refinedmods.refinedstorage.util.StackUtils.getFluidimport com.refinedmods.refinedstorage.api.network.INetwork.insertFluidimport com.refinedmods.refinedstorage.api.network.grid.IGrid.isGridActiveimport com.refinedmods.refinedstorage.api.storage.IStorage.extractimport com.refinedmods.refinedstorage.api.storage.IStorage.insertimport com.refinedmods.refinedstorage.api.render.IElementDrawer.drawimport com.refinedmods.refinedstorage.api.network.grid.IGridFactory.getRelevantTileimport com.refinedmods.refinedstorage.api.network.grid.IGridFactory.createFromStackimport com.refinedmods.refinedstorage.api.network.grid.IGridFactory.createFromBlockimport com.refinedmods.refinedstorage.api.network.grid.IGridFactory.typeimport com.refinedmods.refinedstorage.api.network.grid.IGrid.craftingMatriximport com.refinedmods.refinedstorage.api.network.grid.INetworkAwareGrid.networkimport com.refinedmods.refinedstorage.api.util.IStackList.removeimport com.refinedmods.refinedstorage.api.util.StackListResult.stackimport com.refinedmods.refinedstorage.api.util.IStackList.addimport com.refinedmods.refinedstorage.api.network.grid.IGrid.onCraftingMatrixChangedimport com.refinedmods.refinedstorage.api.network.grid.IGrid.craftingResultimport com.refinedmods.refinedstorage.api.IRSAPI.createItemStackListimport com.refinedmods.refinedstorage.api.network.grid.IGrid.onCraftedimport com.refinedmods.refinedstorage.api.network.grid.IGrid.gridTypeimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.markDirtyimport com.refinedmods.refinedstorage.api.network.INetwork.nodeGraphimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraph.allimport com.refinedmods.refinedstorage.api.network.INetwork.canRunimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.isActiveimport com.refinedmods.refinedstorage.api.network.IWirelessTransmitter.getDimensionimport com.refinedmods.refinedstorage.api.network.IWirelessTransmitter.originimport com.refinedmods.refinedstorage.api.network.IWirelessTransmitter.rangeimport com.refinedmods.refinedstorage.api.network.item.INetworkItemProvider.provideimport com.refinedmods.refinedstorage.api.network.item.INetworkItem.onOpenimport com.refinedmods.refinedstorage.api.network.item.INetworkItem.drainEnergyimport com.refinedmods.refinedstorage.api.IRSAPI.getGridManagerimport com.refinedmods.refinedstorage.api.network.grid.IGridManager.openGridimport com.refinedmods.refinedstorage.api.network.item.INetworkItemManager.closeimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.onConnectedStateChangeimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraph.runActionWhenPossibleimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.writeimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.readimport com.refinedmods.refinedstorage.api.IRSAPI.getStorageDiskManagerimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskManager.getimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskManager.setimport com.refinedmods.refinedstorage.api.IRSAPI.createDefaultItemDiskimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskManager.markForSavingimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.writeConfigurationimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.readConfigurationimport com.refinedmods.refinedstorage.util.StackUtils.readItemsimport com.refinedmods.refinedstorage.tile.data .TileDataParameter.valueimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.invalidateimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.sortimport com.refinedmods.refinedstorage.api.IRSAPI.createDefaultFluidDiskimport com.refinedmods.refinedstorage.api.storage.IStorage.getAccessTypeimport com.refinedmods.refinedstorage.api.storage.IStorage.getStacksimport com.refinedmods.refinedstorage.api.storage.IStorage.getStoredimport com.refinedmods.refinedstorage.api.storage.IStorage.getCacheDeltaimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDisk.capacityimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDisk.setSettingsimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDisk.writeToNbtimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDisk.factoryIdimport com.refinedmods.refinedstorage.util.StackUtils.copyimport com.refinedmods.refinedstorage.util.StackUtils.createStoragesimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.updateimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.canUpdateimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.worldimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.posimport com.refinedmods.refinedstorage.api.storage.IStorage.getPriorityimport com.refinedmods.refinedstorage.api.network.INetwork.itemGridHandlerimport com.refinedmods.refinedstorage.api.network.INetwork.fluidGridHandlerimport com.refinedmods.refinedstorage.api.IRSAPI.getCraftingGridBehaviorimport com.refinedmods.refinedstorage.api.network.grid.ICraftingGridBehavior.onRecipeTransferimport com.refinedmods.refinedstorage.api.network.grid.ICraftingGridBehavior.onCraftedimport com.refinedmods.refinedstorage.api.network.grid.ICraftingGridBehavior.onCraftedShiftimport com.refinedmods.refinedstorage.api.network.INetworkNodeVisitor.Operator.applyimport com.refinedmods.refinedstorage.api.IRSAPI.isNetworkNodeEqualimport com.refinedmods.refinedstorage.api.IRSAPI.getNetworkNodeHashCodeimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.invalidateimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternProvider.createimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.isValidimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.onDisconnectedimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.getTasksimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.getPatternimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getContainerimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getPositionimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.getIdimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getFacingTileimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getDirectionimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.directionimport com.refinedmods.refinedstorage.api.IRSAPI.getNetworkNodeManagerimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeManager.getNodeimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.networkimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getRootContainerimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.isLockedimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.onUsedForProcessingimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.facingTileimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.requestimport com.refinedmods.refinedstorage.api.network.INetwork.insertItemTrackedimport com.refinedmods.refinedstorage.api.network.INetwork.insertFluidTrackedimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.ownerimport com.refinedmods.refinedstorage.api.network.grid.handler.IItemGridHandler.onCraftingCancelRequestedimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorage.updateimport com.refinedmods.refinedstorage.api.IRSAPI.getExternalStorageProvidersimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageProvider.canProvideimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageProvider.provideimport com.refinedmods.refinedstorage.api.network.security.ISecurityManager.invalidateimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraph.invalidateimport com.refinedmods.refinedstorage.api.network.INetwork.worldimport com.refinedmods.refinedstorage.api.network.INetwork.positionimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNode.visitimport com.refinedmods.refinedstorage.api.network.security.ISecurityCard.hasPermissionimport com.refinedmods.refinedstorage.api.network.security.ISecurityCardContainer.cardsimport com.refinedmods.refinedstorage.api.network.security.ISecurityCard.ownerimport com.refinedmods.refinedstorage.api.network.security.ISecurityCardContainer.globalCardimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraph.addListenerimport com.refinedmods.refinedstorage.tile.config.RedstoneMode.isEnabledimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.updateimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.onCancelledimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraph.disconnectAllimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.getStoragesimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.addimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.removeimport com.refinedmods.refinedstorage.tile.config.RedstoneMode.Companion.readimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.readFromNbtimport com.refinedmods.refinedstorage.tile.config.RedstoneMode.writeimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.writeToNbtimport com.refinedmods.refinedstorage.api.IRSAPI.getNetworkManagerimport com.refinedmods.refinedstorage.api.network.INetworkManager.markForSavingimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.energyUsageimport com.refinedmods.refinedstorage.api.network.INetwork.readFromNbtimport com.refinedmods.refinedstorage.api.network.INetwork.writeToNbtimport com.refinedmods.refinedstorage.api.network.INetwork.typeimport com.refinedmods.refinedstorage.api.network.INetworkManager.allimport com.refinedmods.refinedstorage.api.network.INetwork.updateimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeManager.allimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.updateimport com.refinedmods.refinedstorage.api.network.INetworkNodeVisitor.visitimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.onConnectedimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.onDisconnectedimport com.refinedmods.refinedstorage.api.IRSAPI.getNetworkNodeRegistryimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeRegistry.getimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeFactory.createimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.idimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.writeimport com.refinedmods.refinedstorage.api.network.node.INetworkNode.ownerimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskProvider.isValidimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskProvider.getIdimport com.refinedmods.refinedstorage.api.IRSAPI.getStorageDiskRegistryimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskRegistry.getimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskFactory.createFromNbtimport com.refinedmods.refinedstorage.api.storage.IStorageProvider.addItemStoragesimport com.refinedmods.refinedstorage.api.util.IStackList.clearimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCacheListener.onChangedimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCacheListener.onChangedBulkimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCacheListener.onAttachedimport com.refinedmods.refinedstorage.api.IRSAPI.createFluidInstanceListimport com.refinedmods.refinedstorage.api.storage.IStorageProvider.addFluidStoragesimport com.refinedmods.refinedstorage.util.StackUtils.deserializeStackFromNbtimport com.refinedmods.refinedstorage.api.storage.tracker.StorageTrackerEntry.getTimeimport com.refinedmods.refinedstorage.api.storage.tracker.StorageTrackerEntry.getNameimport com.refinedmods.refinedstorage.util.StackUtils.serializeStackToNbtimport com.refinedmods.refinedstorage.api.IRSAPI.getItemStackHashCodeimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageContext.acceptsItemimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageContext.getPriorityimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageContext.getAccessTypeimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageContext.acceptsFluidimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.flushimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.getAllContainersimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.isProcessingimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getUpdateIntervalimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getMaximumSuccessfulCraftingUpdatesimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getOutputimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getByproductsimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getOutputsimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getFluidOutputsimport com.refinedmods.refinedstorage.api.util.IStackList.isEmptyimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getConnectedInventoryimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getConnectedFluidInventoryimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.onTaskChangedimport com.refinedmods.refinedstorage.api.util.IStackList.getCountimport com.refinedmods.refinedstorage.api.IRSAPI.createCraftingMonitorElementListimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementList.addStorageimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementList.commitimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementList.getElementsimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementList.addimport com.refinedmods.refinedstorage.api.util.IStackList.copyimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingRequestInfo.itemimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingRequestInfo.fluidimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManager.getPatternimport com.refinedmods.refinedstorage.api.IRSAPI.createCraftingRequestInfoimport com.refinedmods.refinedstorage.apiimpl.storage.disk.factory.ItemStorageDiskFactory.createFromNbtimport com.refinedmods.refinedstorage.apiimpl.storage.disk.factory.FluidStorageDiskFactory.createFromNbtimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingRequestInfo.writeToNbtimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getInputsimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getFluidInputsimport com.refinedmods.refinedstorage.api.render.IElementDrawers.overlayDrawerimport com.refinedmods.refinedstorage.api.render.IElementDrawers.itemDrawerimport com.refinedmods.refinedstorage.api.render.IElementDrawers.stringDrawerimport com.refinedmods.refinedstorage.api.render.IElementDrawers.fluidDrawerimport com.refinedmods.refinedstorage.api.util.IQuantityFormatter.formatInBucketFormimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.getBaseIdimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.baseElementHashCodeimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.mergeimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.getIdimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.elementHashCodeimport com.refinedmods.refinedstorage.util.StackUtils.writeItemStackimport com.refinedmods.refinedstorage.util.StackUtils.readItemStackimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.drawimport com.refinedmods.refinedstorage.api.render.IElementDrawers.errorDrawerimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.getTooltipimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElement.writeimport com.refinedmods.refinedstorage.api.IRSAPI.getCraftingMonitorElementRegistryimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementRegistry.getimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.startimport com.refinedmods.refinedstorage.api.network.INetwork.markDirtyimport com.refinedmods.refinedstorage.api.IRSAPI.getCraftingTaskRegistryimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskRegistry.getimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPattern.getCraftingTaskFactoryIdimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskFactory.createimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskFactory.createFromNbtimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.updateimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.writeToNbtimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorListener.onAttachedimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.getRequestedimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.getQuantityimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTask.onTrackedInsertimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getPatternsimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getPatternInventoryimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainer.getNameimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCache.reAttachListenersimport com.refinedmods.refinedstorage.api.util.IComparerimport net.minecraft.item.ItemStackimport com.refinedmods.refinedstorage.api.util.IFilterimport com.refinedmods.refinedstorage.api.util.IStackListimport com.refinedmods.refinedstorage.api.util.StackListEntryimport java.util.UUIDimport java.util.HashMapimport com.refinedmods.refinedstorage.api.util.StackListResultimport com.refinedmods.refinedstorage.apiimpl.APIimport com.refinedmods.refinedstorage.apiimpl.util.ItemStackListimport com.refinedmods.refinedstorage.api.util.IQuantityFormatterimport java.util.Localeimport java.math.RoundingModeimport com.refinedmods.refinedstorage.screen.BaseScreenimport com.refinedmods.refinedstorage.api.render.IElementDrawersimport com.refinedmods.refinedstorage.api.render.IElementDrawerimport com.refinedmods.refinedstorage.container.CraftingMonitorContainerimport com.refinedmods.refinedstorage.apiimpl.render.ElementDrawersimport com.mojang.blaze3d.systems.RenderSystemimport com.refinedmods.refinedstorage.RSimport com.refinedmods.refinedstorage.screen.grid.CraftingPreviewScreenimport com.refinedmods.refinedstorage.api.network.grid.IGridFactoryimport net.minecraft.entity.player.PlayerEntityimport com.refinedmods.refinedstorage.api.network.grid.IGridimport net.minecraft.util.math.BlockPosimport com.refinedmods.refinedstorage.tile.grid.GridTileimport net.minecraft.world.Worldimport com.refinedmods.refinedstorage.api.network.grid.GridFactoryTypeimport com.refinedmods.refinedstorage.tile.grid.portable.PortableGridTileimport com.refinedmods.refinedstorage.api.network.INetworkimport com.refinedmods.refinedstorage.api.network.grid.handler.IItemGridHandlerimport java.lang.Runnableimport com.refinedmods.refinedstorage.api.autocrafting.task.ICalculationResultimport com.refinedmods.refinedstorage.api.autocrafting.task.CalculationResultTypeimport com.refinedmods.refinedstorage.network.grid.GridCraftingPreviewResponseMessageimport com.refinedmods.refinedstorage.apiimpl.autocrafting.preview.ErrorCraftingPreviewElementimport com.refinedmods.refinedstorage.network.grid.GridCraftingStartResponseMessageimport com.refinedmods.refinedstorage.api.network.grid.handler.IFluidGridHandlerimport com.refinedmods.refinedstorage.util.StackUtilsimport com.refinedmods.refinedstorage.tile.grid.portable.IPortableGridimport com.refinedmods.refinedstorage.api.network.grid.IGridTabimport com.refinedmods.refinedstorage.api.network.grid.IGridManagerimport com.refinedmods.refinedstorage.container.factory.GridContainerProviderimport com.refinedmods.refinedstorage.api.network.grid.ICraftingGridBehaviorimport com.refinedmods.refinedstorage.api.network.grid.INetworkAwareGridimport net.minecraft.inventory.CraftingInventoryimport com.refinedmods.refinedstorage.api.network.grid.GridTypeimport com.refinedmods.refinedstorage.apiimpl.network.node.GridNetworkNodeimport com.refinedmods.refinedstorage.api.network.item.INetworkItemManagerimport com.refinedmods.refinedstorage.api.network.item.INetworkItemimport java.util.concurrent.ConcurrentHashMapimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeimport com.refinedmods.refinedstorage.api.network.IWirelessTransmitterimport com.refinedmods.refinedstorage.api.network.item.INetworkItemProviderimport com.refinedmods.refinedstorage.item.WirelessGridItemimport com.refinedmods.refinedstorage.apiimpl.network.grid.factory.WirelessGridGridFactoryimport com.refinedmods.refinedstorage.item.WirelessFluidGridItemimport com.refinedmods.refinedstorage.apiimpl.network.grid.factory.WirelessFluidGridGridFactoryimport com.refinedmods.refinedstorage.item.WirelessCraftingMonitorItemimport com.refinedmods.refinedstorage.container.factory.CraftingMonitorContainerProviderimport com.refinedmods.refinedstorage.RSContainersimport com.refinedmods.refinedstorage.apiimpl.storage.ItemStorageTypeimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.IStorageScreenimport com.refinedmods.refinedstorage.api.storage.IStorageProviderimport com.refinedmods.refinedstorage.tile.config.IComparableimport com.refinedmods.refinedstorage.tile.config.IWhitelistBlacklistimport com.refinedmods.refinedstorage.tile.config.IPrioritizableimport com.refinedmods.refinedstorage.tile.config.IAccessTypeimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskContainerContextimport com.refinedmods.refinedstorage.inventory.item.BaseItemHandlerimport com.refinedmods.refinedstorage.inventory.listener.NetworkNodeInventoryListenerimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskimport com.refinedmods.refinedstorage.apiimpl.network.node.ConnectivityStateChangeCauseimport com.refinedmods.refinedstorage.apiimpl.network.node.storage.StorageNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.storage.cache.ItemStorageCacheimport com.refinedmods.refinedstorage.api.storage.cache.InvalidateCauseimport com.refinedmods.refinedstorage.api.storage.IStorageimport com.refinedmods.refinedstorage.util.StorageBlockUtilsimport net.minecraft.nbt.CompoundTagimport com.refinedmods.refinedstorage.apiimpl.network.node.storage.ItemStorageWrapperStorageDiskimport com.refinedmods.refinedstorage.util.AccessTypeUtilsimport com.refinedmods.refinedstorage.tile.StorageTileimport com.refinedmods.refinedstorage.apiimpl.storage.FluidStorageTypeimport com.refinedmods.refinedstorage.inventory.fluid.FluidInventoryimport com.refinedmods.refinedstorage.inventory.listener.NetworkNodeFluidInventoryListenerimport com.refinedmods.refinedstorage.apiimpl.network.node.storage.FluidStorageNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.storage.cache.FluidStorageCacheimport com.refinedmods.refinedstorage.util.FluidStorageBlockUtilsimport com.refinedmods.refinedstorage.apiimpl.network.node.storage.FluidStorageWrapperStorageDiskimport com.refinedmods.refinedstorage.tile.FluidStorageTileimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskListenerimport com.refinedmods.refinedstorage.tile.config.ITypeimport com.refinedmods.refinedstorage.inventory.item.validator.StorageDiskItemValidatorimport com.refinedmods.refinedstorage.inventory.listener.InventoryListenerimport com.refinedmods.refinedstorage.apiimpl.network.node.diskdrive.ItemDriveWrapperStorageDiskimport reborncore.common.fluid.container.FluidInstanceimport com.refinedmods.refinedstorage.apiimpl.network.node.diskdrive.FluidDriveWrapperStorageDiskimport com.refinedmods.refinedstorage.apiimpl.network.node.diskdrive.DiskDriveNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.DiskStateimport com.refinedmods.refinedstorage.tile.DiskDriveTileimport com.refinedmods.refinedstorage.apiimpl.network.node.diskmanipulator.DiskManipulatorNetworkNodeimport com.refinedmods.refinedstorage.inventory.item.UpgradeItemHandlerimport com.refinedmods.refinedstorage.item.UpgradeItemimport com.refinedmods.refinedstorage.apiimpl.network.node.diskmanipulator.StorageDiskItemManipulatorWrapperimport com.refinedmods.refinedstorage.apiimpl.network.node.diskmanipulator.StorageDiskFluidManipulatorWrapperimport com.refinedmods.refinedstorage.inventory.item.ProxyItemHandlerimport java.util.stream.Collectorsimport com.refinedmods.refinedstorage.tile.DiskManipulatorTileimport com.refinedmods.refinedstorage.apiimpl.autocrafting.AllowedTagListimport com.refinedmods.refinedstorage.api.network.grid.ICraftingGridListenerimport java.util.HashSetimport com.refinedmods.refinedstorage.inventory.item.validator.ItemValidatorimport com.refinedmods.refinedstorage.RSItemsimport com.refinedmods.refinedstorage.inventory.item.FilterItemHandlerimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCacheListenerimport com.refinedmods.refinedstorage.apiimpl.storage.cache.listener.FluidGridStorageCacheListenerimport com.refinedmods.refinedstorage.apiimpl.storage.cache.listener.ItemGridStorageCacheListenerimport com.refinedmods.refinedstorage.api.storage.cache.IStorageCacheimport net.minecraft.block.BlockStateimport com.refinedmods.refinedstorage.block.GridBlockimport com.refinedmods.refinedstorage.block.NetworkNodeBlockimport com.refinedmods.refinedstorage.tile.data .TileDataManagerimport com.refinedmods.refinedstorage.util.GridUtilsimport com.refinedmods.refinedstorage.api.network.INetworkNodeVisitorimport com.refinedmods.refinedstorage.apiimpl.network.node.CableNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.RelayNetworkNodeimport com.refinedmods.refinedstorage.tile.config.RedstoneModeimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternContainerimport com.refinedmods.refinedstorage.apiimpl.network.node.CrafterNetworkNode.CrafterModeimport com.refinedmods.refinedstorage.inventory.item.validator.PatternItemValidatorimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingPatternProviderimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskimport com.refinedmods.refinedstorage.apiimpl.network.node.CrafterNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.DetectorNetworkNodeimport com.refinedmods.refinedstorage.block.DetectorBlockimport com.refinedmods.refinedstorage.RSBlocksimport com.refinedmods.refinedstorage.tile.DetectorTileimport com.refinedmods.refinedstorage.apiimpl.network.node.SlottedCraftingRequestimport com.refinedmods.refinedstorage.apiimpl.network.node.ExporterNetworkNodeimport com.refinedmods.refinedstorage.tile.ExporterTileimport com.refinedmods.refinedstorage.apiimpl.network.node.ImporterNetworkNodeimport com.refinedmods.refinedstorage.tile.ImporterTileimport com.refinedmods.refinedstorage.apiimpl.storage.externalstorage.ItemExternalStorageimport com.refinedmods.refinedstorage.apiimpl.network.node.ExternalStorageNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.InterfaceNetworkNodeimport com.refinedmods.refinedstorage.apiimpl.network.node.DestructorNetworkNodeimport net.minecraft.fluid.Fluidimport net.minecraft.block.Blocksimport net.minecraft.enchantment.Enchantmentsimport com.refinedmods.refinedstorage.tile.DestructorTileimport com.refinedmods.refinedstorage.apiimpl.network.node.ConstructorNetworkNodeimport net.minecraft.item.BlockItemimport net.minecraft.util.Handimport com.refinedmods.refinedstorage.apiimpl.network.node.ConstructorNetworkNode.NetworkFluidHandlerimport com.refinedmods.refinedstorage.apiimpl.network.node.ConstructorNetworkNode.ConstructorBlockItemUseContextimport net.minecraft.entity.projectile.FireworkRocketEntityimport com.refinedmods.refinedstorage.tile.ConstructorTileimport java.lang.RuntimeExceptionimport com.refinedmods.refinedstorage.apiimpl.network.node.CrafterManagerNetworkNodeimport com.refinedmods.refinedstorage.tile.CrafterManagerTileimport com.refinedmods.refinedstorage.block.CrafterManagerBlockimport com.refinedmods.refinedstorage.apiimpl.network.node.FluidInterfaceNetworkNodeimport com.refinedmods.refinedstorage.tile.FluidInterfaceTileimport com.refinedmods.refinedstorage.inventory.fluid.ProxyFluidHandlerimport com.refinedmods.refinedstorage.apiimpl.storage.externalstorage.FluidExternalStorageimport com.refinedmods.refinedstorage.apiimpl.network.node.StorageMonitorNetworkNodeimport com.refinedmods.refinedstorage.tile.StorageMonitorTileimport com.refinedmods.refinedstorage.tile.craftingmonitor.ICraftingMonitorimport com.refinedmods.refinedstorage.apiimpl.network.node.CraftingMonitorNetworkNodeimport com.refinedmods.refinedstorage.tile.data .TileDataParameterimport com.refinedmods.refinedstorage.tile.craftingmonitor.CraftingMonitorTileimport com.refinedmods.refinedstorage.api.autocrafting.ICraftingManagerimport com.refinedmods.refinedstorage.block.CraftingMonitorBlockimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageContextimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageimport java.util.concurrent.CopyOnWriteArrayListimport com.refinedmods.refinedstorage.api.storage.externalstorage.IExternalStorageProviderimport com.refinedmods.refinedstorage.api.storage.StorageTypeimport com.refinedmods.refinedstorage.tile.ExternalStorageTileimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkReceiverNetworkNodeimport com.refinedmods.refinedstorage.api.network.security.ISecurityCardContainerimport com.refinedmods.refinedstorage.api.network.security.ISecurityCardimport com.refinedmods.refinedstorage.item.SecurityCardItemimport com.refinedmods.refinedstorage.apiimpl.network.security.SecurityCardimport com.refinedmods.refinedstorage.apiimpl.network.node.SecurityManagerNetworkNodeimport com.refinedmods.refinedstorage.item.NetworkCardItemimport com.refinedmods.refinedstorage.apiimpl.network.node.NetworkTransmitterNetworkNodeimport com.refinedmods.refinedstorage.tile.NetworkReceiverTileimport com.refinedmods.refinedstorage.apiimpl.network.node.WirelessTransmitterNetworkNodeimport com.refinedmods.refinedstorage.api.network.security.ISecurityManagerimport java.lang.IllegalStateExceptionimport com.refinedmods.refinedstorage.api.network.NetworkTypeimport com.refinedmods.refinedstorage.tile.config.IRedstoneConfigurableimport com.refinedmods.refinedstorage.apiimpl.network.grid.handler.ItemGridHandlerimport com.refinedmods.refinedstorage.apiimpl.network.grid.handler.FluidGridHandlerimport com.refinedmods.refinedstorage.apiimpl.network.item.NetworkItemManagerimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraphimport com.refinedmods.refinedstorage.apiimpl.network.NetworkNodeGraphimport com.refinedmods.refinedstorage.apiimpl.autocrafting.CraftingManagerimport com.refinedmods.refinedstorage.apiimpl.storage.tracker.ItemStorageTrackerimport com.refinedmods.refinedstorage.apiimpl.storage.tracker.FluidStorageTrackerimport com.refinedmods.refinedstorage.energy.BaseEnergyStorageimport com.refinedmods.refinedstorage.apiimpl.network.node.RootNetworkNodeimport com.refinedmods.refinedstorage.block.ControllerBlock.EnergyTypeimport com.refinedmods.refinedstorage.block.ControllerBlockimport com.refinedmods.refinedstorage.api.storage.tracker.IStorageTrackerimport com.refinedmods.refinedstorage.api.network.INetworkNodeGraphListenerimport com.refinedmods.refinedstorage.tile.ControllerTileimport com.refinedmods.refinedstorage.api.network.INetworkManagerimport net.minecraft.nbt.ListTagimport java.util.LinkedListimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeManagerimport com.refinedmods.refinedstorage.apiimpl.network.NetworkNodeManagerimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeFactoryimport com.refinedmods.refinedstorage.api.network.node.INetworkNodeRegistryimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskSyncimport com.refinedmods.refinedstorage.api.storage.disk.StorageDiskSyncDataimport com.refinedmods.refinedstorage.apiimpl.storage.disk.StorageDiskSyncimport com.refinedmods.refinedstorage.network.disk.StorageDiskSizeRequestMessageimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskManagerimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskProviderimport com.refinedmods.refinedstorage.apiimpl.storage.disk.StorageDiskManagerimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskFactoryimport com.refinedmods.refinedstorage.api.storage.disk.IStorageDiskRegistryimport com.refinedmods.refinedstorage.network.grid.GridItemUpdateMessageimport com.refinedmods.refinedstorage.network.grid.GridItemDeltaMessageimport com.refinedmods.refinedstorage.network.grid.GridFluidUpdateMessageimport com.refinedmods.refinedstorage.network.grid.GridFluidDeltaMessageimport com.refinedmods.refinedstorage.network.grid.PortableGridItemUpdateMessageimport com.refinedmods.refinedstorage.network.grid.PortableGridItemDeltaMessageimport com.refinedmods.refinedstorage.network.grid.PortableGridFluidUpdateMessageimport com.refinedmods.refinedstorage.network.grid.PortableGridFluidDeltaMessageimport java.lang.UnsupportedOperationExceptionimport com.refinedmods.refinedstorage.api.storage.tracker.StorageTrackerEntryimport com.refinedmods.refinedstorage.apiimpl.storage.externalstorage.ItemExternalStorageCacheimport com.refinedmods.refinedstorage.apiimpl.storage.externalstorage.FluidExternalStorageCacheimport com.refinedmods.refinedstorage.tile.InterfaceTileimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.node.NodeRequirementsimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.node.NodeListenerimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.node.ProcessingNodeimport com.refinedmods.refinedstorage.api.autocrafting.task.CraftingTaskReadExceptionimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.node.CraftingNodeimport java.util.LinkedHashMapimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.IoUtilimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementListimport com.refinedmods.refinedstorage.apiimpl.autocrafting.craftingmonitor.ItemCraftingMonitorElementimport com.refinedmods.refinedstorage.apiimpl.autocrafting.craftingmonitor.FluidCraftingMonitorElementimport com.refinedmods.refinedstorage.apiimpl.autocrafting.craftingmonitor.ErrorCraftingMonitorElementimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.preview.CraftingPreviewInfoimport com.refinedmods.refinedstorage.api.autocrafting.preview.ICraftingPreviewElementimport com.refinedmods.refinedstorage.apiimpl.autocrafting.preview.ItemCraftingPreviewElementimport com.refinedmods.refinedstorage.apiimpl.autocrafting.preview.FluidCraftingPreviewElementimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingRequestInfoimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.calculator.CraftingCalculatorExceptionimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.calculator.CalculationResultimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.preview.CraftingPreviewElementFactoryimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.CraftingTaskimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.CraftingPatternInputsimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.calculator.PossibleInputsimport java.util.Dequeimport java.util.stream.IntStreamimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.monitor.CraftingMonitorElementFactoryimport com.refinedmods.refinedstorage.apiimpl.storage.disk.ItemStorageDiskimport com.refinedmods.refinedstorage.apiimpl.storage.disk.FluidStorageDiskimport com.refinedmods.refinedstorage.apiimpl.storage.disk.factory.ItemStorageDiskFactoryimport com.refinedmods.refinedstorage.apiimpl.storage.disk.factory.FluidStorageDiskFactoryimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskFactoryimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.calculator.CraftingCalculatorimport com.refinedmods.refinedstorage.api.autocrafting.task.ICraftingTaskRegistryimport com.refinedmods.refinedstorage.util.RenderUtilsimport com.refinedmods.refinedstorage.api.autocrafting.preview.ICraftingPreviewElementRegistryimport java.util.stream.Streamimport com.refinedmods.refinedstorage.render.Stylesimport com.refinedmods.refinedstorage.util.PacketByteBufUtilsimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorElementRegistryimport com.refinedmods.refinedstorage.api.autocrafting.craftingmonitor.ICraftingMonitorListenerimport java.util.LinkedHashSetimport com.refinedmods.refinedstorage.apiimpl.autocrafting.CraftingPattern.DummyCraftingInventoryimport com.refinedmods.refinedstorage.apiimpl.autocrafting.task.v6.CraftingTaskFactoryimport com.refinedmods.refinedstorage.apiimpl.autocrafting.CraftingPatternimport com.refinedmods.refinedstorage.apiimpl.autocrafting.CraftingPatternFactoryExceptionimport com.refinedmods.refinedstorage.apiimpl.autocrafting.CraftingPatternFactory
class GridNetworkNode(world: World, pos: BlockPos?, type: GridType) : NetworkNode(world, pos), INetworkAwareGrid, IType {
    private val allowedTagList: AllowedTagList = AllowedTagList(Runnable { updateAllowedTags() })
    private val craftingContainer: Container = object : Container(ContainerType.CRAFTING, 0) {
        fun canInteractWith(player: PlayerEntity?): Boolean {
            return false
        }

        fun onCraftMatrixChanged(inventory: IInventory?) {
            if (!world.isClient) {
                onCraftingMatrixChanged()
            }
        }
    }
    private var currentRecipe: ICraftingRecipe? = null
    private val matrix: CraftingInventory = CraftingInventory(craftingContainer, 3, 3)
    private val result: CraftingResultInventory = CraftingResultInventory()
    private val processingMatrix: BaseItemHandler = BaseItemHandler(9 * 2)
            .addListener(NetworkNodeInventoryListener(this))
            .addListener(InventoryListener<BaseItemHandler> { handler: BaseItemHandler?, slot: Int, reading: Boolean ->
                if (!reading && slot < 9) {
                    allowedTagList.clearItemTags(slot)
                }
            })
    private val processingMatrixFluids: FluidInventory = FluidInventory(9 * 2, FluidAttributes.BUCKET_VOLUME * 64)
            .addListener(NetworkNodeFluidInventoryListener(this))
            .addListener(InventoryListener<FluidInventory> { handler: FluidInventory?, slot: Int, reading: Boolean ->
                if (!reading && slot < 9) {
                    allowedTagList.clearFluidTags(slot)
                }
            })
    private var reading = false
    private val craftingListeners: MutableSet<ICraftingGridListener?> = HashSet<ICraftingGridListener?>()
    private val patterns: BaseItemHandler = object : BaseItemHandler(2) {
        fun getSlotLimit(slot: Int): Int {
            return if (slot == 1) 1 else super.getSlotLimit(slot)
        }

        @Nonnull
        override fun insertItem(slot: Int, @Nonnull stack: ItemStack, simulate: Boolean): ItemStack {
            // Allow in slot 0
            // Disallow in slot 1
            // Only allow in slot 1 when it isn't a blank pattern
            // This makes it so that written patterns can be re-inserted in slot 1 to be overwritten again
            // This makes it so that blank patterns can't be inserted in slot 1 through hoppers.
            return if (slot == 0 || stack.getTag() != null) {
                super.insertItem(slot, stack, simulate)
            } else stack
        }
    }
            .addValidator(ItemValidator(RSItems.PATTERN))
            .addListener(NetworkNodeInventoryListener(this))
            .addListener(InventoryListener<BaseItemHandler> { handler: BaseItemHandler, slot: Int, reading: Boolean ->
                val pattern: ItemStack = handler.getStackInSlot(slot)
                if (!reading && slot == 1 && !pattern.isEmpty()) {
                    val processing = PatternItem.isProcessing(pattern)
                    if (processing) {
                        for (i in 0..8) {
                            processingMatrix.setStackInSlot(i, PatternItem.getInputSlot(pattern, i))
                            processingMatrixFluids.setFluid(i, PatternItem.getFluidInputSlot(pattern, i))
                        }
                        for (i in 0..8) {
                            processingMatrix.setStackInSlot(9 + i, PatternItem.getOutputSlot(pattern, i))
                            processingMatrixFluids.setFluid(9 + i, PatternItem.getFluidOutputSlot(pattern, i))
                        }
                        val allowedTagsFromPattern: AllowedTagList? = PatternItem.getAllowedTags(pattern)
                        if (allowedTagsFromPattern != null) {
                            allowedTagList.setAllowedItemTags(allowedTagsFromPattern.getAllowedItemTags())
                            allowedTagList.setAllowedFluidTags(allowedTagsFromPattern.getAllowedFluidTags())
                        }
                    } else {
                        for (i in 0..8) {
                            matrix.setInventorySlotContents(i, PatternItem.getInputSlot(pattern, i))
                        }
                    }
                    setProcessingPattern(processing)
                    markDirty()
                }
            })
    private val filters: List<IFilter<*>> = ArrayList<IFilter<*>>()
    private val tabs: List<IGridTab> = ArrayList<IGridTab>()
    private val filter: FilterItemHandler = FilterItemHandler(filters, tabs).addListener(NetworkNodeInventoryListener(this)) as FilterItemHandler
    private val type: GridType
    private var viewType: Int = IGrid.Companion.VIEW_TYPE_NORMAL
    private var sortingDirection: Int = IGrid.Companion.SORTING_DIRECTION_DESCENDING
    private var sortingType: Int = IGrid.Companion.SORTING_TYPE_QUANTITY
    private var searchBoxMode: Int = IGrid.Companion.SEARCH_BOX_MODE_NORMAL
    private var size: Int = IGrid.Companion.SIZE_STRETCH
    private var tabSelected = -1
    private var tabPage = 0
    var isExactPattern = true
    private var processingPattern = false
    private var processingType: Int = IType.ITEMS
    fun getAllowedTagList(): AllowedTagList {
        return allowedTagList
    }

    private fun updateAllowedTags() {
        markDirty()
        val tile: BlockEntity? = world.getBlockEntity(pos)
        if (tile is GridTile) {
            (tile as GridTile?).getDataManager().sendParameterToWatchers(GridTile.ALLOWED_ITEM_TAGS)
            (tile as GridTile?).getDataManager().sendParameterToWatchers(GridTile.ALLOWED_FLUID_TAGS)
        }
    }

    override val energyUsage: Int
        get() = when (type) {
            GridType.NORMAL -> RS.SERVER_CONFIG.getGrid().getGridUsage()
            GridType.CRAFTING -> RS.SERVER_CONFIG.getGrid().getCraftingGridUsage()
            GridType.PATTERN -> RS.SERVER_CONFIG.getGrid().getPatternGridUsage()
            GridType.FLUID -> RS.SERVER_CONFIG.getGrid().getFluidGridUsage()
            else -> 0
        }

    fun setViewType(viewType: Int) {
        this.viewType = viewType
    }

    fun setSortingDirection(sortingDirection: Int) {
        this.sortingDirection = sortingDirection
    }

    fun setSortingType(sortingType: Int) {
        this.sortingType = sortingType
    }

    fun setSearchBoxMode(searchBoxMode: Int) {
        this.searchBoxMode = searchBoxMode
    }

    fun setTabSelected(tabSelected: Int) {
        this.tabSelected = tabSelected
    }

    fun setTabPage(page: Int) {
        tabPage = page
    }

    fun setSize(size: Int) {
        this.size = size
    }

    fun isProcessingPattern(): Boolean {
        return if (world.isClient) GridTile.PROCESSING_PATTERN.value else processingPattern
    }

    fun setProcessingPattern(processingPattern: Boolean) {
        this.processingPattern = processingPattern
    }

    val gridType: GridType
        get() = type

    fun createListener(player: ServerPlayerEntity?): IStorageCacheListener<*> {
        return if (type === GridType.FLUID) FluidGridStorageCacheListener(player, network) else ItemGridStorageCacheListener(player, network)
    }

    @get:Nullable
    val storageCache: IStorageCache<*>?
        get() = if (network != null) if (type === GridType.FLUID) network!!.fluidStorageCache else network!!.itemStorageCache else null

    @get:Nullable
    val itemHandler: IItemGridHandler?
        get() = if (network != null) network!!.itemGridHandler else null

    @get:Nullable
    val fluidHandler: IFluidGridHandler?
        get() = if (network != null) network!!.fluidGridHandler else null

    override fun addCraftingListener(listener: ICraftingGridListener?) {
        craftingListeners.add(listener)
    }

    override fun removeCraftingListener(listener: ICraftingGridListener?) {
        craftingListeners.remove(listener)
    }

    val title: Text
        get() = when (type) {
            GridType.CRAFTING -> TranslationTextComponent("gui.refinedstorage.crafting_grid")
            GridType.PATTERN -> TranslationTextComponent("gui.refinedstorage.pattern_grid")
            GridType.FLUID -> TranslationTextComponent("gui.refinedstorage.fluid_grid")
            else -> TranslationTextComponent("gui.refinedstorage.grid")
        }

    fun getPatterns(): IItemHandler {
        return patterns
    }

    override fun getFilter(): IItemHandlerModifiable {
        return filter
    }

    override fun getFilters(): List<IFilter<*>> {
        return filters
    }

    override fun getTabs(): List<IGridTab> {
        return tabs
    }

    val craftingMatrix: CraftingInventory
        get() = matrix
    val craftingResult: CraftingResultInventory
        get() = result

    fun getProcessingMatrix(): BaseItemHandler {
        return processingMatrix
    }

    fun getProcessingMatrixFluids(): FluidInventory {
        return processingMatrixFluids
    }

    override fun onCraftingMatrixChanged() {
        if (currentRecipe == null || !currentRecipe.matches(matrix, world)) {
            currentRecipe = world.recipeManager.getRecipe(IRecipeType.CRAFTING, matrix, world).orElse(null)
        }
        if (currentRecipe == null) {
            result.setInventorySlotContents(0, ItemStack.EMPTY)
        } else {
            result.setInventorySlotContents(0, currentRecipe.getCraftingResult(matrix))
        }
        craftingListeners.forEach(Consumer<ICraftingGridListener?> { obj: ICraftingGridListener? -> obj.onCraftingMatrixChanged() })
        if (!reading) {
            markDirty()
        }
    }

    override fun onRecipeTransfer(player: PlayerEntity?, recipe: Array<Array<ItemStack?>?>?) {
        API.instance().getCraftingGridBehavior().onRecipeTransfer(this, player, recipe)
    }

    fun clearMatrix() {
        for (i in 0 until processingMatrix.getSlots()) {
            processingMatrix.setStackInSlot(i, ItemStack.EMPTY)
        }
        for (i in 0 until processingMatrixFluids.getSlots()) {
            processingMatrixFluids.setFluid(i, FluidInstance.EMPTY)
        }
        for (i in 0 until matrix.getSizeInventory()) {
            matrix.setInventorySlotContents(i, ItemStack.EMPTY)
        }
    }

    override fun onClosed(player: PlayerEntity?) {
        // NO OP
    }

    val isGridActive: Boolean
        get() {
            val state: BlockState = world.getBlockState(pos)
            return if (state.getBlock() is GridBlock) {
                state.get(NetworkNodeBlock.CONNECTED)
            } else false
        }
    val slotId: Int
        get() = -1

    override fun onCrafted(player: PlayerEntity?, @Nullable availableItems: IStackList<ItemStack?>?, @Nullable usedItems: IStackList<ItemStack?>?) {
        API.instance().getCraftingGridBehavior().onCrafted(this, currentRecipe, player, availableItems, usedItems)
    }

    override fun onClear(player: PlayerEntity?) {
        if (type === GridType.CRAFTING && network != null && network!!.securityManager!!.hasPermission(Permission.INSERT, player)) {
            for (i in 0 until matrix.getSizeInventory()) {
                val slot: ItemStack = matrix.getStackInSlot(i)
                if (!slot.isEmpty()) {
                    matrix.setInventorySlotContents(i, network!!.insertItem(slot, slot.getCount(), Action.PERFORM))
                    network!!.itemStorageTracker!!.changed(player, slot.copy())
                }
            }
        } else if (type === GridType.PATTERN) {
            clearMatrix()
        }
    }

    override fun onCraftedShift(player: PlayerEntity?) {
        API.instance().getCraftingGridBehavior().onCraftedShift(this, player)
    }

    fun onCreatePattern() {
        if (canCreatePattern()) {
            if (patterns.getStackInSlot(1).isEmpty()) {
                patterns.extractItem(0, 1, false)
            }
            val pattern = ItemStack(RSItems.PATTERN)
            PatternItem.setToCurrentVersion(pattern)
            PatternItem.setProcessing(pattern, processingPattern)
            if (!processingPattern) {
                PatternItem.setExact(pattern, isExactPattern)
            } else {
                PatternItem.setAllowedTags(pattern, allowedTagList)
            }
            if (processingPattern) {
                for (i in 0..17) {
                    if (!processingMatrix.getStackInSlot(i).isEmpty()) {
                        if (i >= 9) {
                            PatternItem.setOutputSlot(pattern, i - 9, processingMatrix.getStackInSlot(i))
                        } else {
                            PatternItem.setInputSlot(pattern, i, processingMatrix.getStackInSlot(i))
                        }
                    }
                    val fluid: FluidInstance = processingMatrixFluids.getFluid(i)
                    if (!fluid.isEmpty()) {
                        if (i >= 9) {
                            PatternItem.setFluidOutputSlot(pattern, i - 9, fluid)
                        } else {
                            PatternItem.setFluidInputSlot(pattern, i, fluid)
                        }
                    }
                }
            } else {
                for (i in 0..8) {
                    val ingredient: ItemStack = matrix.getStackInSlot(i)
                    if (!ingredient.isEmpty()) {
                        PatternItem.setInputSlot(pattern, i, ingredient)
                    }
                }
            }
            patterns.setStackInSlot(1, pattern)
        }
    }

    private val isPatternAvailable: Boolean
        private get() = !(patterns.getStackInSlot(0).isEmpty() && patterns.getStackInSlot(1).isEmpty())

    fun canCreatePattern(): Boolean {
        if (!isPatternAvailable) {
            return false
        }
        return if (isProcessingPattern()) {
            var inputsFilled = 0
            var outputsFilled = 0
            for (i in 0..8) {
                if (!processingMatrix.getStackInSlot(i).isEmpty()) {
                    inputsFilled++
                }
                if (!processingMatrixFluids.getFluid(i).isEmpty()) {
                    inputsFilled++
                }
            }
            for (i in 9..17) {
                if (!processingMatrix.getStackInSlot(i).isEmpty()) {
                    outputsFilled++
                }
                if (!processingMatrixFluids.getFluid(i).isEmpty()) {
                    outputsFilled++
                }
            }
            inputsFilled > 0 && outputsFilled > 0
        } else {
            !result.getStackInSlot(0).isEmpty() && isPatternAvailable
        }
    }

    override fun getViewType(): Int {
        return if (world.isClient) GridTile.VIEW_TYPE.value else viewType
    }

    override fun getSortingDirection(): Int {
        return if (world.isClient) GridTile.SORTING_DIRECTION.value else sortingDirection
    }

    override fun getSortingType(): Int {
        return if (world.isClient) GridTile.SORTING_TYPE.value else sortingType
    }

    override fun getSearchBoxMode(): Int {
        return if (world.isClient) GridTile.SEARCH_BOX_MODE.value else searchBoxMode
    }

    override fun getSize(): Int {
        return if (world.isClient) GridTile.SIZE.value else size
    }

    override fun getTabSelected(): Int {
        return if (world.isClient) GridTile.TAB_SELECTED.value else tabSelected
    }

    override fun getTabPage(): Int {
        return if (world.isClient) GridTile.TAB_PAGE.value else Math.min(tabPage, totalTabPages)
    }

    val totalTabPages: Int
        get() = Math.floor(Math.max(0, tabs.size - 1).toFloat() / IGrid.TABS_PER_PAGE as Float.toDouble()).toInt()

    override fun onViewTypeChanged(type: Int) {
        TileDataManager.setParameter(GridTile.VIEW_TYPE, type)
    }

    override fun onSortingTypeChanged(type: Int) {
        TileDataManager.setParameter(GridTile.SORTING_TYPE, type)
    }

    override fun onSortingDirectionChanged(direction: Int) {
        TileDataManager.setParameter(GridTile.SORTING_DIRECTION, direction)
    }

    override fun onSearchBoxModeChanged(searchBoxMode: Int) {
        TileDataManager.setParameter(GridTile.SEARCH_BOX_MODE, searchBoxMode)
    }

    override fun onSizeChanged(size: Int) {
        TileDataManager.setParameter(GridTile.SIZE, size)
    }

    override fun onTabSelectionChanged(tab: Int) {
        TileDataManager.setParameter(GridTile.TAB_SELECTED, tab)
    }

    override fun onTabPageChanged(page: Int) {
        if (page >= 0 && page <= totalTabPages) {
            TileDataManager.setParameter(GridTile.TAB_PAGE, page)
        }
    }

    override fun getType(): Int {
        return if (world.isClient) GridTile.PROCESSING_TYPE.value else processingType
    }

    override fun setType(type: Int) {
        processingType = type
        markDirty()
    }

    val itemFilters: IItemHandlerModifiable
        get() = processingMatrix
    val fluidFilters: FluidInventory
        get() = processingMatrixFluids

    override fun read(tag: CompoundTag) {
        super.read(tag)
        if (tag.contains(NBT_ALLOWED_TAGS)) {
            allowedTagList.readFromNbt(tag.getCompound(NBT_ALLOWED_TAGS))
        }
        reading = true
        StackUtils.readItems(matrix, 0, tag)
        StackUtils.readItems(patterns, 1, tag)
        StackUtils.readItems(filter, 2, tag)
        StackUtils.readItems(processingMatrix, 3, tag)
        if (tag.contains(NBT_PROCESSING_MATRIX_FLUIDS)) {
            processingMatrixFluids.readFromNbt(tag.getCompound(NBT_PROCESSING_MATRIX_FLUIDS))
        }
        if (tag.contains(NBT_TAB_SELECTED)) {
            tabSelected = tag.getInt(NBT_TAB_SELECTED)
        }
        if (tag.contains(NBT_TAB_PAGE)) {
            tabPage = tag.getInt(NBT_TAB_PAGE)
        }
        reading = false
    }

    override val id: Identifier
        get() = GridUtils.getNetworkNodeId(type)

    override fun write(tag: CompoundTag): CompoundTag {
        super.write(tag)
        tag.put(NBT_ALLOWED_TAGS, allowedTagList.writeToNbt())
        StackUtils.writeItems(matrix, 0, tag)
        StackUtils.writeItems(patterns, 1, tag)
        StackUtils.writeItems(filter, 2, tag)
        StackUtils.writeItems(processingMatrix, 3, tag)
        tag.put(NBT_PROCESSING_MATRIX_FLUIDS, processingMatrixFluids.writeToNbt())
        tag.putInt(NBT_TAB_SELECTED, tabSelected)
        tag.putInt(NBT_TAB_PAGE, tabPage)
        return tag
    }

    override fun writeConfiguration(tag: CompoundTag): CompoundTag {
        super.writeConfiguration(tag)
        tag.putInt(NBT_VIEW_TYPE, viewType)
        tag.putInt(NBT_SORTING_DIRECTION, sortingDirection)
        tag.putInt(NBT_SORTING_TYPE, sortingType)
        tag.putInt(NBT_SEARCH_BOX_MODE, searchBoxMode)
        tag.putInt(NBT_SIZE, size)
        tag.putBoolean(NBT_EXACT_MODE, isExactPattern)
        tag.putBoolean(NBT_PROCESSING_PATTERN, processingPattern)
        tag.putInt(NBT_PROCESSING_TYPE, processingType)
        return tag
    }

    override fun readConfiguration(tag: CompoundTag) {
        super.readConfiguration(tag)
        if (tag.contains(NBT_VIEW_TYPE)) {
            viewType = tag.getInt(NBT_VIEW_TYPE)
        }
        if (tag.contains(NBT_SORTING_DIRECTION)) {
            sortingDirection = tag.getInt(NBT_SORTING_DIRECTION)
        }
        if (tag.contains(NBT_SORTING_TYPE)) {
            sortingType = tag.getInt(NBT_SORTING_TYPE)
        }
        if (tag.contains(NBT_SEARCH_BOX_MODE)) {
            searchBoxMode = tag.getInt(NBT_SEARCH_BOX_MODE)
        }
        if (tag.contains(NBT_SIZE)) {
            size = tag.getInt(NBT_SIZE)
        }
        if (tag.contains(NBT_EXACT_MODE)) {
            isExactPattern = tag.getBoolean(NBT_EXACT_MODE)
        }
        if (tag.contains(NBT_PROCESSING_PATTERN)) {
            processingPattern = tag.getBoolean(NBT_PROCESSING_PATTERN)
        }
        if (tag.contains(NBT_PROCESSING_TYPE)) {
            processingType = tag.getInt(NBT_PROCESSING_TYPE)
        }
    }

    override val drops: IItemHandler
        get() = when (type) {
            GridType.CRAFTING -> CombinedInvWrapper(filter, InvWrapper(matrix))
            GridType.PATTERN -> CombinedInvWrapper(filter, patterns)
            else -> CombinedInvWrapper(filter)
        }

    companion object {
        @kotlin.jvm.JvmField
        val ID: Identifier = Identifier(RS.ID, "grid")
        @kotlin.jvm.JvmField
        val CRAFTING_ID: Identifier = Identifier(RS.ID, "crafting_grid")
        @kotlin.jvm.JvmField
        val PATTERN_ID: Identifier = Identifier(RS.ID, "pattern_grid")
        @kotlin.jvm.JvmField
        val FLUID_ID: Identifier = Identifier(RS.ID, "fluid_grid")
        const val NBT_VIEW_TYPE = "ViewType"
        const val NBT_SORTING_DIRECTION = "SortingDirection"
        const val NBT_SORTING_TYPE = "SortingType"
        const val NBT_SEARCH_BOX_MODE = "SearchBoxMode"
        private const val NBT_EXACT_MODE = "Exact"
        const val NBT_TAB_SELECTED = "TabSelected"
        const val NBT_TAB_PAGE = "TabPage"
        const val NBT_SIZE = "Size"
        private const val NBT_PROCESSING_PATTERN = "ProcessingPattern"
        private const val NBT_PROCESSING_TYPE = "ProcessingType"
        private const val NBT_PROCESSING_MATRIX_FLUIDS = "ProcessingMatrixFluids"
        private const val NBT_ALLOWED_TAGS = "AllowedTags"
    }

    init {
        this.type = type
    }
}